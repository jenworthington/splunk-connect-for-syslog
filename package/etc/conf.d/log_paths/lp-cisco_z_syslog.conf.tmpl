# Cisco ACE
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_ACE" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

# Cisco IOS AND General Syslog
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_IOS" "parser" "no_parse" }}
{{- tmpl.Exec "t/source_network.t" $context }}

# Cisco APIC
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_APIC" "parser" "no_parse" }}
{{- tmpl.Exec "t/source_network.t" $context }}

# Cisco UCM
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "CISCO_UCM" "parser" "cisco_ucm" }}
{{- tmpl.Exec "t/source_network.t" $context }}

#Cisco's syslog is unique in the level of non conformance to custom and standard
filter f_is_cisco_syslog{
    match(
        #'%(?<cisco_facility>[A-Z0-9\-\_]+)-(?<cisco_severity>[0-7])-(?<cisco_mnemonic>[^\: ]+)'
        '%[A-Z0-9\-\_]+-[0-7]-[^\: ]+'
        template('$(template t_hdr_msg)')
    )
};
rewrite set_cisco_syslog{
    set("cisco_syslog" value("fields.sc4s_syslog_format"));
};
parser cisco-parser-ex{
    channel {
        if {
            #Cisco IOS-XR devices with node-id format
            filter {                
                match('^<\d*>(?:(\d+)\: )?(RP\/\d*\/RSP\d*\/CPU\d*:)?(?:([^\: ]+):)(?:(\*|\.)?(\w\w\w {1,2}\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}\.\d+))? :  ?([^\[]{1,30}\[\d*\]: ?\%[^\: ]+\:? ?.*)' value('RAWMSG') flags(store-matches));
            };

            parser { date-parser-nofilter(format(
                '%b %d %H:%M:%S.%f',
                '%b %d %H:%M:%S',
                '%b %d %I:%M:%S %p.%f',
                '%b %d %I:%M:%S %p',
                '%b %d %Y %H:%M:%S.%f',
                '%b %d %Y %H:%M:%S')
                template("$5"));
            };

            rewrite {
                set(
                    "${3}",
                    value("HOST")                
                    condition(not match('^\d+$', value('3')) and match('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$' value('3')))
                );            
                set(
                    "${6}",
                    value("MESSAGE")                
                );
                set(
                    "${HOST_FROM}"
                    value("HOST")
                    condition(not host("."))
                );
            };
        } elif {
            # Cisco Nexus Switch
            filter {
                match('^<(?<pri>\d*)>:? ?20\d\d (\w\w\w \d+ \d\d:\d\d:\d\d(?:.\d{3,3})?)(?: [A-Z]{3}:)? ([^ ]+)? ?((%[^\: ]+)\:? ?.*)'
                value('RAWMSG') 
                flags(store-matches));
            };            
            rewrite {
                set(
                    "${3}",
                    value("HOST")     
                    condition(not match('^\d+$', value('3')) and match('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$' value('3')))           
                );            
                set(
                    "${4}",
                    value("MESSAGE")                
                );
            };
            parser { date-parser-nofilter(format(
                '%b %d %H:%M:%S.%f',
                '%b %d %H:%M:%S',
                )
                template("$2"));
            };


        } elif {
            #Cisco IOS Other
            filter {
                match('^<\d*> ?(?:(\d+)\: )?(?:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]): )?(?:(\d+): )?(?:(\d\d:\d\d:\d\d|\d{1,6} \d{1,2}))?(?:(\*|\.)?(?:20\d\d )?((?:\w\w\w {1,2}\d{1,2} (?:\d{2,4} )?\d\d:\d\d:\d\d)(?:\.\d{3,6})?( [AP]M)?)( [A-Za-z]{3,3} )?)? ?((?:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*(?:[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]))? ?: (last message repeated \d* times|(\%[^\: ]+)\:? ?.*)'
                value('RAWMSG') 
                flags(store-matches));
            };            

            rewrite {
                set(
                    "${4}",
                    value("HOST")                
                    condition(not match('^\d+$', value('4')) and match('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$' value('4')))
                );            
                set(
                    "${11}",
                    value("HOST")                
                    condition(
                    not match('^\d+$', value('11')) 
                    and match('^.{4,}$' value('11'))
                    and match('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$' value('11')))
                );                        
                set(
                    "${12}",
                    value("MESSAGE")                
                );
                set(
                    "${HOST_FROM}"
                    value("HOST")
                    condition(not host("."))
                );                
            };
            if {
                filter {
                    match('^(\*|\.)$' value("7"));
                };
                rewrite { set("cisco reported time error : ${7}" value("fields.cisco_time_error"));};
            };
            if {
                filter {
                    match('^\w\w\w' value("8"));
                };
                parser { date-parser-nofilter(format(
                        '%b %d %H:%M:%S.%f',
                        '%b %d %H:%M:%S',
                        '%b %d %I:%M:%S %p.%f',
                        '%b %d %I:%M:%S %p',
                        '%b %d %Y %H:%M:%S.%f',
                        '%b %d %H:%M:%S.%f',
                        '%b %d %Y %H:%M:%S')
                        template("$8"));
                };                                
            };
        } else {
            #Cisco AireOS format
            filter {                
                match('^<\d*>(?:(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]): )(?:[^:]*: )((?:\w\w\w {1,2}\d{1,2} (?:\d{2,4} )?\d\d:\d\d:\d\d)(?:\.\d{3,6})): ((\%[^\: ]+)\:? ?.*)'
                value('RAWMSG') 
                flags(store-matches)
                );
            };

            parser { date-parser-nofilter(format(
                '%b %d %H:%M:%S.%f'
                )
                template("$4"));
            };

            rewrite {
                set(
                    "${3}",
                    value("HOST")                
                    
                );            
                set(
                    "${5}",
                    value("MESSAGE")                
                );
            };            

        };
    };
};
# Cisco ACE
filter f_cisco_ace {
    message('^%ACE-\d+-\d{1,10}: ') or
    match('^%ACE-\d+-\d{1,10}:', value("LEGACY_MSGHDR"));
};

filter f_cisco_ace_nohost {
    match('^%ACE-\d+-\d{1,10}:', value("LEGACY_MSGHDR"));
};


# Cisco APIC
filter f_cisco_apic {
    message('%LOG_LOCAL\d-\d-');
    or message('%LOG_-\d-');
    or message('%ACLLOG-\d-ACLLOG_PKTLOG');
};

# Cisco UCM
filter f_cisco_ucm {
    message("^%UC\_")
    or 
    message("^%CCM\_")
};

filter f_cisco_ucm_message {
    message(
#        '^(<\d{1,3}>)\d*: (?:([^:]+): )?(.*[A|P]M\.\d{3}) (\w{3}) : (%.*)'
#       '^(<\d{1,3}>)\d*: (?:([^:]+): )?(.*) : (%.*)'
        '^(<\d{1,3}>)\d*: (?:([^:]+): )?(\w{3} \d{1,2} (\d{4} )?\d\d:\d\d:\d\d(?: [AP]M)?(\.\d{3,6})?)([^:]*): (%[A-Z].*)'
        flags(store-matches)
    );
};

parser p_cisco_ucm_date {
                date-parser-nofilter(format(
                    '%b %d %H:%M:%S.%f',
                    '%b %d %Y %I:%M:%S %p.%f'
                    )
                    template("$3"));
};

rewrite r_cisco_ucm_message {
    set("cisco_ucm" value("fields.sc4s_syslog_format"));
    set("cisco_ucm" value("fields.sc4s_vendor_product"));
    set("$HOST_FROM" value("HOST") );
    set("$2" value("HOST") condition(match("^..." template("${2}"))) );
    set("$7" value("MESSAGE"));
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_ACE_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_ACE_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_ACE_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_ACE traffic
            source (s_CISCO_ACE);
            flags (final);
	    };
{{- end}}
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_APIC_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_APIC_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_APIC_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_APIC traffic
            source (s_CISCO_APIC);
            flags (final);
	    };
{{- end}}
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_IOS_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_IOS_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_IOS_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_IOS traffic
            source (s_CISCO_IOS);
            flags (final);
	    };
{{- end}}
{{- if or (or (getenv  (print "SC4S_LISTEN_CISCO_UCM_TCP_PORT")) (getenv  (print "SC4S_LISTEN_CISCO_UCM_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_CISCO_UCM_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for CISCO_UCM traffic
            source (s_CISCO_UCM);
            flags (final);
	    };
{{- end}}

        channel {
        # Listen on the default port (typically 514) for CISCO_IOS traffic
            source (s_DEFAULT);
            filter(f_is_cisco_syslog);
            flags(final);
        };
    };
    if {
        parser(cisco-parser-ex);
        rewrite(set_cisco_syslog);
    };
    if {
        filter {
            message('%ACLLOG-\d-ACLLOG_PKTLOG')
        };
        rewrite {
            set("cisco_APIC_acl", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:apic:acl"),  template("t_hdr_msg"))
        };
        parser { p_add_context_splunk(key("cisco_apic_acl")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

    } elif {
        filter(f_cisco_apic);
        rewrite {
            set("cisco_APIC_events", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:apic:events"),  template("t_hdr_msg"))
        };
        parser { p_add_context_splunk(key("cisco_apic_events")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };
    } elif {
        filter(f_cisco_ace);
        rewrite {
            set("HOST", value("PROGRAM"));
            set("cisco_ace", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:ace"))
        };
        parser {p_add_context_splunk(key("cisco_ace")); };
        parser (compliance_meta_by_source);
    } elif {
         filter(f_cisco_ucm);
         if {
            filter {
                message(
                    'Node ?ID(?:\:|\=)([^ \]]+)'
                    flags(store-matches)
                );
            };
            rewrite {
                set("$1" value("HOST") );
            };
        } elif {
            filter {
                message(
                    ' on node ([^ ]+\. |[^ ]+ )'
                    flags(store-matches)
                );
            };
            rewrite {
                set("$1" value("HOST") );
            };
        };

        rewrite {
            set("cisco_ucm", value("fields.sc4s_vendor_product"));
            r_set_splunk_dest_default(sourcetype("cisco:ucm"))
        };
        parser {p_add_context_splunk(key("cisco_ucm")); };
        parser (compliance_meta_by_source);
        rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };
    } else {
        rewrite {
            set("cisco_ios", value("fields.sc4s_vendor_product"));
            guess-time-zone();
            r_set_splunk_dest_default(sourcetype("cisco:ios"))
        };
        parser { p_add_context_splunk(key("cisco_ios")); };
        parser (compliance_meta_by_source);
        if {
            filter{ program('^%')};
            rewrite { set("$(template ${.splunk.sc4s_template} $(template t_program_nopid_msg))" value("MSG")); };
        } else {
            rewrite { set("$(template ${.splunk.sc4s_template} $(template t_msg_only))" value("MSG")); };
        };
    };
    

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_CISCO_IOS_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_CISCO_IOS" "no")) }}
    destination(d_archive);
{{- end}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- if (print (getenv "SC4S_DEST_CISCO_IOS_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_CISCO_IOS_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

    flags(flow-control,final);
};