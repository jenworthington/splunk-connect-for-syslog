# AVI_VANTAGE
{{- /* The following provides a unique port source configuration if env var(s) are set */}}
{{- $context := dict "port_id" "AVI_VANTAGE" "parser" "common" }}
{{- tmpl.Exec "t/source_network.t" $context }}

{{- /* Filters or parsers used by the log path should be declared prior to use */}}
{{- /* above the actual log{} stanza) */}}

filter f_avi_vantage {
  program("Avi-Controller");
};

log {
    junction {
{{- if or (or (getenv  (print "SC4S_LISTEN_AVI_VANTAGE_TCP_PORT")) (getenv  (print "SC4S_LISTEN_AVI_VANTAGE_UDP_PORT"))) (getenv  (print "SC4S_LISTEN_AVI_VANTAGE_TLS_PORT")) }}
        channel {
        # Listen on the specified dedicated port(s) for AVI_VANTAGE traffic
            source (s_AVI_VANTAGE);
            flags (final);
	    };
{{- end}}
        channel {
        # Listen on the default port (typically 514) for AVI_VANTAGE traffic
            source (s_DEFAULT);
            filter(f_is_rfc3164);
            filter(f_avi_vantage);
            flags(final);
        };
    };

# Set a default sourcetype and index, as well as an appropriate value for the field
# "sc4s_vendor_product".  This field is sent as an indexed field to Splunk,
# and is useful for downstream analysis.

    rewrite {
        set("avi_vantage", value("fields.sc4s_vendor_product"));
        r_set_splunk_dest_default(sourcetype("avi:vantage"));
    };

# using the key "local_example" find any customized index,source or sourcetype meta values
    parser { p_add_context_splunk(key("avi_vantage")); };

# using any user-supplied filters, override Splunk metadata based on further hostname
# or CIDR block filters.
    parser (compliance_meta_by_source);

# Prepare the payload for sending to Splunk. This step is done here rather than in the
# destination(s) to ensure that it is performed only once.  If the template value is not overridden,
# the default value (2nd argument) is used.
    rewrite { set("$(template ${.splunk.sc4s_template} $(template t_hdr_msg))" value("MSG")); };

{{- /* Check environment variables (and defaults if unset) for sending to the HEC */}}
{{- /* destination. When more destination options are offered in SC4S, this is where */}}
{{- /* output to them will be configured */}}

{{- if or (conv.ToBool (getenv "SC4S_DEST_SPLUNK_HEC_GLOBAL" "yes")) (conv.ToBool (getenv "SC4S_DEST_AVI_VANTAGE_HEC" "no")) }}
    destination(d_hec);
{{- end}}

{{- /* Check environment variables (and defaults if unset) for sending to the local EWMM-format */}}
{{- /* disk archive */}}

{{- if or (conv.ToBool (getenv "SC4S_ARCHIVE_GLOBAL" "no")) (conv.ToBool (getenv "SC4S_ARCHIVE_AVI_VANTAGE" "no")) }}
    destination(d_archive);
{{- end}}

{{- /* Check environment variables for sending to a global list of alternate destinations */}}

{{- if (print (getenv "SC4S_DEST_GLOBAL_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_GLOBAL_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}

{{- /* Check environment variables for sending to a list of alternate destinations only for this specific source */}}

{{- if (print (getenv "SC4S_DEST_AVI_VANTAGE_ALTERNATES")) }}
    {{ getenv "SC4S_DEST_AVI_VANTAGE_ALTERNATES" | regexp.ReplaceLiteral "^" "destination(" | regexp.ReplaceLiteral "[, ]+" ");\n    destination(" }});
{{- end }}


# All passes through any matching log path will be final
    flags(flow-control,final);
};
